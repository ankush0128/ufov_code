%%
clc; close all; clear all;

%% Set all necessary paths and parameters
tic
ProcessedImagePath = 'C:\input_data\movie3\processedImages';
Folder_raw_data_image ='C:\input_data\movie3\processedImages\file00152.tif'; %Raw image that will be overlayed with the trackig results
framenumber = 152; % frame number of the movie
startframe=1;                           %number of the first frame
endframe=152;                           %number of the last frame

% Set directories and file names for TGMM
Directory_cellprofiler_data='C:\ROOT_TGMM\data\data';   % This is where the output of CellProfiler's data locates %Folder were the raw data is stored. (these folders are NOT illumination background corrected and stored in seperate folders yet.) 
Directory_TGMM_nucleiChSvWshedPBC_release='C:\ROOT_TGMM\build\nucleiChSvWshedPBC\Release'; %TGMM folder that has the program ProcessStackBatchMulticore.exe in it with a TGMM_cofigFile.txt file.
Directory_TGMM_build_release='C:\ROOT_TGMM\build\Release';                                 %TGMM folder that has program TGMM.exe in it with a TGMM_cofigFile.txt file.
outputfolder_TGMM= 'C:\TGMMruns';  %folder were output generated by TGMM.exe is stored. In the TGMM_cofigFile.txt this is called: debugPathPrefix
Directory_readTGMM_XMLoutput='C:\NEW_TGMM_ReadXML\readTGMM_XMLoutput';                                 %Directory with the folder readTGMM_XML_output, which can be downloaded from the keller lab website: https://www.janelia.org/file/3049847
filename_maximum_distance='Maximum_distance_traveled_sorted.xlsx';

time_per_frame=1;  %minute               %Time between two successive frames in seconds
pixel_size=3.45/2; %micrometer           %Size of one pixel in micrometers             
number_of_frames=endframe-startframe+1;  %Number of frames to analyse
%the start and endframe number also have to be filled in on line 72. [trackingMatrix, svIdxCell]= parseMixtureGaussiansXml2trackingMatrixCATMAIDformat(diroutput_TGMM,startframenumber,endframenumber);
maximumspeed=10;                    %Estimated maximum speed in number of pixels of a cell under all conditions
minimum_frames_present=10;          %Threshold, Cells that are present in less frames as this threshold are discared as noise. Set to 0 is you do not want to discard any cells.
toc
%% Load .tif movie raw data 
tic
[FileTif, pathname]=uigetfile('*.tiff', 'the movie', 0, 0);

InfoImage=imfinfo([pathname FileTif]);
mImage=InfoImage(1).Width;
nImage=InfoImage(1).Height;
NumberImages=length(InfoImage);
FinalImage=zeros(nImage,mImage,NumberImages,'uint16');

    
    TifLink = Tiff([pathname FileTif], 'r');
    for i=1:NumberImages
        TifLink.setDirectory(i);
        FinalImage(:,:,i)=TifLink.read();
    end
    TifLink.close();  
    mov2=double(FinalImage); 

% checking the movie
figure;
imshow(mov2(:,:,5),[]);
toc
%% Image pre-process of raw data with the following procedure: 
% Analysis flow
% 1) Remove background: morphological filtering -> imtophat (imopen
% followed by subtraction
% 2) Normalization: Contrast-stretching method works better in our dataset
% 3) run again the imtophat to remove the blurriness

% improcess2D_dimmerCellsV2_mpc: level is adjusted down to 0.4% of the default level
% for more dimmer cells in the image, use improcess2D_dimmerCellsV2_mpc and steepness
% 0.95 to normalize the brightness

% For pre-processing the movie
tic
[FinalMovie2] = improcess2D_dimmerCellsV2_mpc(mov2, 0.95);

figure;
imshow(FinalMovie2(:,:,5), []);

figure;
subplot(1,2,1); imshow(FinalMovie2(:,:,5), []);
subplot(1,2,2); imshow(FinalMovie2(:,:,5), []);
toc
%% Imwrite processed images to individual images
tic
cd (ProcessedImagePath);
for i=1:framenumber;
        filename = sprintf('file0%04d.tif',i);
        imwrite(FinalMovie2(:,:,i), filename);
        
    i
end
toc
%% NOTE: Load the pre-processed images into the CellProfiler for cell segmentation

% Clear up the "ROOT_TGMM\data\data" folder & "C:\TGMMruns" folder first before running
% the following code

% Make sure the save file path(or directory) on CellProfiler is at: 'C:\ROOT_TGMM\data\data'

%% %% This section converts the CellProfiler's output .tiff files into .tif files and move individual .tif file to a folder
tic
cd (Directory_cellprofiler_data);

for i=startframe:endframe
fileName = sprintf('file0%04d.tiff',i);
I=imread(fileName);
newfileName = sprintf('file0%04d.tif',i);
imwrite(I,newfileName)
mkdir (sprintf('file0%04d',i))
filedir = sprintf('file0%04d',i);
movefile (newfileName,filedir)
end
toc
%% TGMM1 (TGMM do its own segmentation again)
%This Script runs both the TGMM fuctions ProcessStackBatchMulticore.exe

%and TGMM.exe, were ProcessStackBatchMulticore.exe is used for cell
%segmetation and TGMM.exe is used for cell tracking. This will take some time.
tic
cd (Directory_TGMM_nucleiChSvWshedPBC_release)
cmdstr = sprintf('!ProcessStackBatchMulticore.exe TGMM_configFile.txt %f %f',startframe,endframe)
%cmdstr = sprintf('!ProcessStackBatchMulticore.exe TGMM_configFile.txt 1 10');
eval(cmdstr)
toc
%% TGMM2 (Cell tracking)
tic
cd (Directory_TGMM_build_release)
cmdstr = sprintf('!TGMM.exe TGMM_configFile.txt %f %f',startframe,endframe)
eval(cmdstr)
toc
%% Open_output_TGMM
tic
cd (outputfolder_TGMM)
A=dir;                                %reads all files in current folder
Number_folders=length(A);
datefolder=zeros(1,length(A));
for i=1:Number_folders                %finds newest folder, this is were TGMM stored the data.
   datefolder(i)=A(i).datenum;
end
[~,ii]=max(datefolder);
C=A(ii).name;
cd(C)
cd XML_finalResult_lht
str=('\GMEMfinalResult_frame');

directory_TGMM_XMLfile = sprintf('%s%s',cd, '\');
diroutput_TGMM=sprintf('%s%s',cd,str);

[trackingMatrix]= Lois_parseMixtureGaussiansXml2trackingMatrixCATMAIDformat(diroutput_TGMM,startframe,endframe);

toc
%% Import the TGMM processed data
tic
data =trackingMatrix;
Number_of_movements=length(data);
cellnumber=max(data(:,10));             %Total number of cells in the whole movie
x_position=data(:,3);          %x-cordinates
y_position=data(:,4);          %y-cordiantes
cell_number=data(:,10);         %if -1 it means that there was no linkage to previous frame
frame_number=data(:,8);        
tblA = table(cell_number,frame_number,x_position,y_position);
tblB = sortrows(tblA,{'cell_number','frame_number'},{'ascend','ascend'});
matrix_of_tblB=tblB.Variables;
toc
%% Shows the supervoxels 
tic
start=150;
finish=150;

image=imread(Folder_raw_data_image); % load the original processed image
figure; imshow(image, []);

hold on

for h=start:finish
map= directory_TGMM_XMLfile;
filename = sprintf('%sGMEMfinalResult_frame%04d.svb',map,h);
% cd D:\NEW_TGMM_ReadXML\readTGMM_XMLoutput                                 %Directory with the folder readTGMM_XML_output, which can be downloaded from the keller lab website: https://www.janelia.org/file/3049847
[svList, sizeIm] = readListSupervoxelsFromBinaryFile(filename);

SIZ=sizeIm;
for k=1:length(svList)
    [p,q]=ind2sub(SIZ,svList{k,1});
    scatter(p,q,'+','r')
end
namefigure=sprintf('tracked%04d.tiff',h);
end
hold off

savename = ['Supervoxel'];
path = 'C:\input_data\movie3\results';
saveas(gcf, [path '\' savename '.tif']);   % save image as an tif file
saveas(gcf, [path '\' savename '.fig']);   % save image as an fig file
toc

%% Overlapped image: cells of ineterst and the initial image
tic
figure; imshow(double(image), []);
hold on
scatter(matrix_of_tblB(1:100,3),matrix_of_tblB(1:100,4),'+','r');
hold off
toc
%% speed_TGMM_faster_computation_remove_noise(noneed to run)
tic
number_of_cells=max(cell_number);    %Total number of cells in the whole movie

teller=zeros(1,number_of_cells);
speed=zeros(9,number_of_cells);
movement = size(tblB,1);

i=1;
k=1;
jstart=1;
jumpcount = 0;

for j = 1:movement
    if j~= movement
    
    if (tblB{j,1}==tblB{j+1,1}) %Is this the cell the same cell as in the next frame?
        
        curmovdis=((tblB{j+1,3}-tblB{j,3})^2+(tblB{j+1,4}-tblB{j,4})^2)^(1/2); % current moving distance
        celdist(i)=curmovdis; % cell distance
        speed(1,k)=speed(1,k)+curmovdis;%The total distance a cell travelled in the whole movie
                
%         teller(i)=teller(i)+1;                          %Number of frames cell i appeared in
%         sumtellers=sum(teller); 
        
        i=i+1;
        
    else
        if i==1;
        speed(2,k) = k;
        speed(3,k)=tblB{j,3};                           
        speed(4,k)=tblB{j,4}; 
        else
        speed(5,k)=max(celdist(:)); %maximumdistance travelled
        speed(2,k) = k;  % cell number
        speed(3,k)=tblB{j,3};                           %final x cordiate of cell k
        speed(4,k)=tblB{j,4};                           %final y cordiate of cell k
        speed(6,k)=((tblB{j,3}-tblB{jstart,3})^2+(tblB{j,4}-tblB{jstart,4})^2)^(1/2); %net distance travelled
        teller(1,k) = tblB{j,2};
        if speed(5,k)>=maximumspeed  
            jumpcount=jumpcount+1;                          %How many mistakes are made during the image processing
            speed(1,k)=0;
            speed(5,k)=0;
        else
        end
        if i<=minimum_frames_present
            jumpcount=jumpcount+1;                          %How many mistakes are made during the image processing
            speed(1,k)=0;
            speed(5,k)=0;
        else
        end
%          if teller(i)>number_of_frames
%             Cell_division(i)=i;
%          else
%          end
        end
        k=k+1;
        i=1;
        jstart=j+1;
        celdist=[];       
    end
    j
    else
       if i==1;
        speed(2,k) = k;
        speed(3,k)=tblB{j,3};                           
        speed(4,k)=tblB{j,4}; 
        else
        speed(5,k)=max(celdist(:)); %maximumdistance travelled
        speed(2,k) = k;  % cell number
        speed(3,k)=tblB{j,3};                           %final x cordiate of cell k
        speed(4,k)=tblB{j,4};                           %final y cordiate of cell k
        speed(6,k)=((tblB{j,3}-tblB{jstart,3})^2+(tblB{j,4}-tblB{jstart,4})^2)^(1/2); %net distance travelled
        teller(1,k) = tblB{j,2};
        if speed(5,k)>=maximumspeed  
            jumpcount=jumpcount+1;                          %How many mistakes are made during the image processing
            speed(1,k)=0;
            speed(5,k)=0;
        else
        end
        if i<=minimum_frames_present
            jumpcount=jumpcount+1;                          %How many mistakes are made during the image processing
            speed(1,k)=0;
            speed(5,k)=0;
        else
        end 
    end
   
end
end

speed(1,:)=(speed(1,:)*pixel_size)./((teller-1)*time_per_frame);              %speed of the cell per second per micrometer
speed(isnan(speed(:))) = 0;
speed(7,:)=speed(6,:)./(teller-1);  %Mean straight-line speed
speed(8,:)=speed(6,:)./speed(5,:);  %Confinement ratio
speed(9,:)=teller-1;
toc

%% TOP100fastest cells analysis 
tic
sort_by_speed = sortrows(speed',1,{'descend'});
sort_by_travel_distance = sortrows(speed',5,{'descend'});

first_non_moving_cell = find(sort_by_speed(:,1) == 0);
all_moving_cells = first_non_moving_cell(1)-1;

output_matrix_speed = array2table(sort_by_speed,'VariableNames',{'speed', 'cellnumber', 'x_coordianate','y_coordinate','maximumdistance_travelled','netdistance_travelled','mean_straigth_line_speed','confinement_ratio','Number_of_frames_present'});
output_matrix_travel_distance = array2table(sort_by_travel_distance,'VariableNames',{'speed', 'cellnumber', 'x_coordianate','y_coordinate','maximumdistance_travelled','netdistance_travelled','mean_straigth_line_speed','confinement_ratio','Number_of_frames_present'});

figure; imshow(double(image), []);
hold on
scatter(sort_by_speed(1:100,3),sort_by_speed(1:100,4),'+','r');
scatter(sort_by_travel_distance(1:100,3),sort_by_travel_distance(1:100,4),'d','c');
hold off

savename = ['Top100_FastestCells'];
path = 'C:\input_data\movie3\results';
saveas(gcf, [path '\' savename '.tif']);   % save image as an tif file
saveas(gcf, [path '\' savename '.fig']);   % save image as an fig file

toc
%output          
% speed: 	Cell's are listed in an ascending  order acourding to there cellnumber
% 		1. Speed
% 		2. Cellnumber
% 		3. X-coordinate endposition cell i
% 		4. Y-coordinate endposition cell i
%       5. Maximum distance travelled cell i
%       6. Net distance travelled
%       7. Mean straigth-line speed
%       8. Confinement ratio
%       9.Number of frames present
% sort_by_speed: 	Cell's are listed in a descending order acourding to there speed
% 		1.Speed
% 		2.Cellumber
% 		3. X-coordinate endposition cell i
% 		4. Y-coordinate endposition cell i
% teller: 	Number of frames cell i appeared in
% noise_cell:	Number of 'cells' that are discared as noise, based on the number of frames the appear in.
% jumpcount: Number of cells aceding the maximum speed, indicating a mistake during the celltracking. 			(important for CellProfiler, not known to be important for TGMM.)

%% Display the target cells with the fastest moving speed
tic
top_percent_cells = 0.01*cellnumber; % this is top 1% of total cells
top_percent_moving_cells = 0.10*all_moving_cells; % this is top 10% of all moving cells
top_percent_moving_cells=top_percent_cells;

% Plot fast moving cells based on speed
figure(10); imshow(double(image), []);
hold on
scatter(sort_by_speed(1:top_percent_moving_cells,3),sort_by_speed(1:top_percent_moving_cells,4),'+','r'); % choose the top xx cells to display
hold off

% Plot fast moving cells based on maximum travel distance
figure(11); imshow(double(image), []);
hold on
scatter(sort_by_travel_distance(1:top_percent_moving_cells,3),sort_by_travel_distance(1:top_percent_moving_cells,4),'+','r'); % choose the top xx cells to display
hold off

savename = ['LastFrameImage'];
path = 'C:\input_data\movie3\results';
saveas(gcf, [path '\' savename '.tif']);   % save image as an tif file
saveas(gcf, [path '\' savename '.fig']);   % save image as an fig file

toc